{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyP3Q48X4uF8DyTesqlpxEFJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vj9pK5MFvpKO","executionInfo":{"status":"ok","timestamp":1726673374036,"user_tz":-330,"elapsed":824,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"6a96dac4-5227-404a-d40f-3ddaa14de1ea"},"outputs":[{"output_type":"stream","name":"stdout","text":["!nuraV ,olleH\n"]}],"source":["def reverse_string(input_string):\n","    \"\"\"Return the reversed version of the input string.\"\"\"\n","    return input_string[::-1]\n","\n","# Example usage\n","input_str = \"Hello, Varun!\"\n","reversed_str = reverse_string(input_str)\n","print(reversed_str)  # Outputs: !nuraV ,olleH\n"]},{"cell_type":"code","source":["def count_vowels(input_string):\n","    \"\"\"Count the number of vowels in the input string.\"\"\"\n","    vowels = 'aeiouAEIOU'  # Define the vowels (both lowercase and uppercase)\n","    count = sum(1 for char in input_string if char in vowels)\n","    return count\n","\n","# Example usage\n","input_str = \"Hello, Varun!\"\n","vowel_count = count_vowels(input_str)\n","print(f\"Number of vowels in '{input_str}': {vowel_count}\")  # Outputs: 4\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"atrnxq2IwImB","executionInfo":{"status":"ok","timestamp":1726673484008,"user_tz":-330,"elapsed":821,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"164a35d9-0f5b-4ecd-97d7-decfd9ff65c7"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of vowels in 'Hello, Varun!': 4\n"]}]},{"cell_type":"code","source":["def is_palindrome(input_string):\n","    \"\"\"Check if the input string is a palindrome.\"\"\"\n","    # Normalize the string: remove spaces and convert to lowercase\n","    normalized_string = ''.join(input_string.split()).lower()\n","    # Check if the string is the same forwards and backwards\n","    return normalized_string == normalized_string[::-1]\n","\n","# Example usage\n","input_str = \"A man a plan a canal Panama\"\n","result = is_palindrome(input_str)\n","print(f\"Is the string '{input_str}' a palindrome? {result}\")  # Outputs: True\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XYwov7ZNwd1W","executionInfo":{"status":"ok","timestamp":1726673629627,"user_tz":-330,"elapsed":518,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"a8c78c79-981b-4030-ca43-207c4c87917f"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Is the string 'A man a plan a canal Panama' a palindrome? True\n"]}]},{"cell_type":"code","source":["def are_anagrams(str1, str2):\n","    \"\"\"Check if two strings are anagrams of each other.\"\"\"\n","    # Normalize the strings: remove spaces and convert to lowercase\n","    normalized_str1 = ''.join(str1.split()).lower()\n","    normalized_str2 = ''.join(str2.split()).lower()\n","\n","    # Sort the characters of both strings and compare\n","    return sorted(normalized_str1) == sorted(normalized_str2)\n","\n","# Example usage\n","string1 = \"Listen\"\n","string2 = \"Silent\"\n","result = are_anagrams(string1, string2)\n","print(f\"Are the strings '{string1}' and '{string2}' anagrams? {result}\")  # Outputs: True\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VLOCr-IYxKyi","executionInfo":{"status":"ok","timestamp":1726673687578,"user_tz":-330,"elapsed":620,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"d8b24f70-8128-48a0-ef90-b1cb4ddaba9f"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Are the strings 'Listen' and 'Silent' anagrams? True\n"]}]},{"cell_type":"code","source":["def find_occurrences(main_string, substring):\n","    \"\"\"Find all occurrences of a substring in a given string.\"\"\"\n","    start = 0  # Initialize the starting index for searching\n","    occurrences = []  # List to store the starting indices of occurrences\n","\n","    while True:\n","        # Find the index of the substring\n","        start = main_string.find(substring, start)\n","\n","        # If find() returns -1, no more occurrences are found\n","        if start == -1:\n","            break\n","\n","        occurrences.append(start)  # Store the index of the found substring\n","        start += 1  # Move to the next character for the next search\n","\n","    return occurrences\n","\n","# Example usage\n","main_str = \"This is a test string. This test is for testing.\"\n","substring = \"test\"\n","result = find_occurrences(main_str, substring)\n","print(f\"Occurrences of '{substring}' in the main string: {result}\")  # Outputs: [10, 28]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-y9cuGXyxY5h","executionInfo":{"status":"ok","timestamp":1726673785376,"user_tz":-330,"elapsed":616,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"be18ab53-4b74-4f07-89e6-7a1747aff663"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Occurrences of 'test' in the main string: [10, 28, 40]\n"]}]},{"cell_type":"code","source":["def compress_string(input_string):\n","    \"\"\"Compress a string using counts of repeated characters.\"\"\"\n","    if not input_string:\n","        return \"\"\n","\n","    compressed = []\n","    count = 1  # Initialize the count of characters\n","\n","    # Iterate through the string\n","    for i in range(1, len(input_string)):\n","        if input_string[i] == input_string[i - 1]:\n","            count += 1  # Increment count if the same character is repeated\n","        else:\n","            # Append the character and its count to the compressed list\n","            compressed.append(input_string[i - 1])\n","            compressed.append(str(count))\n","            count = 1  # Reset count for the new character\n","\n","    # Handle the last group of characters\n","    compressed.append(input_string[-1])\n","    compressed.append(str(count))\n","\n","    # Join the list into a compressed string\n","    compressed_string = ''.join(compressed)\n","\n","    # Return the compressed string if it's shorter than the original\n","    return compressed_string if len(compressed_string) < len(input_string) else input_string\n","\n","# Example usage\n","input_str = \"aaaabbccddee\"\n","compressed_str = compress_string(input_str)\n","print(f\"Compressed string: {compressed_str}\")  # Outputs: a4b2c2d2e2\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U2Auwg9Lxwx_","executionInfo":{"status":"ok","timestamp":1726673885321,"user_tz":-330,"elapsed":9,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"7674a8e6-8815-44a0-fe18-ac91414f4f3d"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Compressed string: a4b2c2d2e2\n"]}]},{"cell_type":"code","source":["def has_unique_characters(input_string):\n","    \"\"\"Check if a string has all unique characters.\"\"\"\n","    # Normalize the string by removing spaces and converting to lowercase\n","    normalized_string = input_string.replace(\" \", \"\").lower()\n","\n","    # Use a set to track seen characters\n","    seen = set()\n","\n","    for char in normalized_string:\n","        if char in seen:\n","            return False  # Character already seen, not unique\n","        seen.add(char)  # Add character to the set\n","\n","    return True  # All characters are unique\n","\n","# Example usage\n","input_str = \"Hello\"\n","result = has_unique_characters(input_str)\n","print(f\"Does the string '{input_str}' have all unique characters? {result}\")  # Outputs: False\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yio9CBHHyJQQ","executionInfo":{"status":"ok","timestamp":1726674024582,"user_tz":-330,"elapsed":614,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"9f8092c0-21af-49d6-bf45-7a063d45e23a"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Does the string 'Hello' have all unique characters? False\n"]}]},{"cell_type":"code","source":["def convert_case(input_string, to_upper=True):\n","    \"\"\"Convert a string to uppercase or lowercase.\"\"\"\n","    if to_upper:\n","        return input_string.upper()  # Convert to uppercase\n","    else:\n","        return input_string.lower()  # Convert to lowercase\n","\n","# Example usage\n","input_str = \"Hello, Varun!\"\n","\n","# Convert to uppercase\n","upper_case_str = convert_case(input_str, to_upper=True)\n","print(f\"Uppercase: {upper_case_str}\")  # Outputs: HELLO, VARUN!\n","\n","# Convert to lowercase\n","lower_case_str = convert_case(input_str, to_upper=False)\n","print(f\"Lowercase: {lower_case_str}\")  # Outputs: hello, varun!\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cv9YHR92ya4m","executionInfo":{"status":"ok","timestamp":1726674126467,"user_tz":-330,"elapsed":616,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"6a910989-4520-4422-fab4-084b81b87f83"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Uppercase: HELLO, VARUN!\n","Lowercase: hello, varun!\n"]}]},{"cell_type":"code","source":["def count_words(input_string):\n","    \"\"\"Count the number of words in a given string.\"\"\"\n","    # Split the string into words based on whitespace\n","    words = input_string.split()\n","    return len(words)  # Return the number of words\n","\n","# Example usage\n","input_str = \"Hello, varun\"\n","word_count = count_words(input_str)\n","print(f\"Number of words in the string: {word_count}\")  # Outputs: 2\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7KGh09e-zEDK","executionInfo":{"status":"ok","timestamp":1726674267366,"user_tz":-330,"elapsed":622,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"b9bd4795-079b-49ec-dbd8-e35848da1202"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of words in the string: 2\n"]}]},{"cell_type":"code","source":["def concatenate_strings(str1, str2):\n","    \"\"\"Concatenate two strings without using the + operator.\"\"\"\n","    # Use the join method to concatenate\n","    return ''.join([str1, str2])\n","\n","# Example usage\n","string1 = \"Hello, \"\n","string2 = \"Varun\"\n","result = concatenate_strings(string1, string2)\n","print(result)  # Outputs: Hello, Varun\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VYJ1WSKGzmc6","executionInfo":{"status":"ok","timestamp":1726674341062,"user_tz":-330,"elapsed":1115,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"3a1858fb-8c7f-4a1d-9e20-79bb4464300b"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, Varun\n"]}]},{"cell_type":"code","source":["def remove_element(lst, element):\n","    \"\"\"Remove all occurrences of a specific element from a list.\"\"\"\n","    return [item for item in lst if item != element]\n","\n","# Example usage\n","original_list = [1, 2, 3, 4, 2, 5, 2, 6]\n","element_to_remove = 3\n","new_list = remove_element(original_list, element_to_remove)\n","\n","print(f\"Original list: {original_list}\")  # Outputs: [1, 2, 3, 4, 2, 5, 2, 6]\n","print(f\"Updated list: {new_list}\")         # Outputs: [1, 2 , 4, 5, 6]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qc5lu6P7z4S7","executionInfo":{"status":"ok","timestamp":1726674411707,"user_tz":-330,"elapsed":615,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"0def1513-dafa-4004-c097-096fe6dde087"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Original list: [1, 2, 3, 4, 2, 5, 2, 6]\n","Updated list: [1, 2, 4, 2, 5, 2, 6]\n"]}]},{"cell_type":"code","source":["def find_second_largest(numbers):\n","    \"\"\"Find the second largest number in a list of integers.\"\"\"\n","    if len(numbers) < 2:\n","        return None  # Not enough elements to find the second largest\n","\n","    # Initialize the first and second largest to negative infinity\n","    first_largest = second_largest = float('-inf')\n","\n","    for number in numbers:\n","        if number > first_largest:\n","            second_largest = first_largest\n","            first_largest = number\n","        elif first_largest > number > second_largest:\n","            second_largest = number\n","\n","    return second_largest if second_largest != float('-inf') else None\n","\n","# Example usage\n","numbers_list = [3, 1, 4, 4, 2, 5]\n","second_largest_number = find_second_largest(numbers_list)\n","print(f\"The second largest number is: {second_largest_number}\")  # Outputs: 4\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FGXzJ0KE0Jmq","executionInfo":{"status":"ok","timestamp":1726674493511,"user_tz":-330,"elapsed":614,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"98b420a9-b61c-4ff6-e017-504553e53bbf"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["The second largest number is: 4\n"]}]},{"cell_type":"code","source":["def count_occurrences(lst):\n","    \"\"\"Count the occurrences of each element in a list.\"\"\"\n","    occurrences = {}  # Initialize an empty dictionary\n","\n","    for item in lst:\n","        if item in occurrences:\n","            occurrences[item] += 1  # Increment count if item exists\n","        else:\n","            occurrences[item] = 1  # Initialize count for new item\n","\n","    return occurrences\n","\n","# Example usage\n","example_list = [1, 2, 2, 3, 1, 4, 4, 4, 5]\n","result = count_occurrences(example_list)\n","print(result)  # Outputs: {1: 2, 2: 2, 3: 1, 4: 3, 5: 1}\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"op_Cb-uC0dpy","executionInfo":{"status":"ok","timestamp":1726674551866,"user_tz":-330,"elapsed":613,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"a4734a41-e3c9-44b1-86b7-757e3ca342bb"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["{1: 2, 2: 2, 3: 1, 4: 3, 5: 1}\n"]}]},{"cell_type":"code","source":["def reverse_list(lst):\n","    \"\"\"Reverse a list in-place.\"\"\"\n","    left = 0  # Start index\n","    right = len(lst) - 1  # End index\n","\n","    while left < right:\n","        # Swap the elements\n","        lst[left], lst[right] = lst[right], lst[left]\n","        # Move towards the center\n","        left += 1\n","        right -= 1\n","\n","# Example usage\n","example_list = [1, 2, 3, 4, 5]\n","reverse_list(example_list)\n","print(f\"Reversed list: {example_list}\")  # Outputs: [5, 4, 3, 2, 1]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SD9JX36B0r5f","executionInfo":{"status":"ok","timestamp":1726674596194,"user_tz":-330,"elapsed":5,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"33d8368f-89dc-4381-ce94-6ffd29497e96"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Reversed list: [5, 4, 3, 2, 1]\n"]}]},{"cell_type":"code","source":["def remove_duplicates(original_list):\n","    \"\"\"Remove duplicates from a list while preserving the original order.\"\"\"\n","    seen = set()  # Set to track seen elements\n","    result = []   # List to store the result\n","\n","    for item in original_list:\n","        if item not in seen:\n","            seen.add(item)  # Add to the set if not seen\n","            result.append(item)  # Append to the result list\n","\n","    return result\n","\n","# Example usage\n","example_list = [1, 2, 3, 2, 4, 1, 5, 3]\n","result_list = remove_duplicates(example_list)\n","print(f\"Original list: {example_list}\")  # Outputs: [1, 2, 3, 2, 4, 1, 5, 3]\n","print(f\"List after removing duplicates: {result_list}\")  # Outputs: [1, 2, 3, 4, 5]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F13rjqoL020f","executionInfo":{"status":"ok","timestamp":1726674631535,"user_tz":-330,"elapsed":628,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"f2e180ab-760d-4a75-bc72-8d3fdbb779f1"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Original list: [1, 2, 3, 2, 4, 1, 5, 3]\n","List after removing duplicates: [1, 2, 3, 4, 5]\n"]}]},{"cell_type":"code","source":["def is_sorted(lst):\n","    \"\"\"Check if the list is sorted in ascending or descending order.\"\"\"\n","    if len(lst) < 2:\n","        return True  # A list with 0 or 1 element is considered sorted\n","\n","    ascending = all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n","    descending = all(lst[i] >= lst[i + 1] for i in range(len(lst) - 1))\n","\n","    return ascending or descending\n","\n","# Example usage\n","example_list_asc = [1, 2, 3, 4, 5]\n","example_list_desc = [5, 4, 3, 2, 1]\n","example_list_unsorted = [1, 3, 2, 4]\n","\n","print(f\"Is the list {example_list_asc} sorted? {is_sorted(example_list_asc)}\")  # Outputs: True\n","print(f\"Is the list {example_list_desc} sorted? {is_sorted(example_list_desc)}\")  # Outputs: True\n","print(f\"Is the list {example_list_unsorted} sorted? {is_sorted(example_list_unsorted)}\")  # Outputs: False\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DgI3EIzR0_XE","executionInfo":{"status":"ok","timestamp":1726674684757,"user_tz":-330,"elapsed":616,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"ce40f9a0-8a33-422a-9b9f-3cff7cfeba64"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Is the list [1, 2, 3, 4, 5] sorted? True\n","Is the list [5, 4, 3, 2, 1] sorted? True\n","Is the list [1, 3, 2, 4] sorted? False\n"]}]},{"cell_type":"code","source":["def merge_sorted_lists(list1, list2):\n","    \"\"\"Merge two sorted lists into a single sorted list.\"\"\"\n","    merged_list = []\n","    i, j = 0, 0  # Pointers for both lists\n","\n","    # Traverse both lists and append the smaller element to the merged list\n","    while i < len(list1) and j < len(list2):\n","        if list1[i] < list2[j]:\n","            merged_list.append(list1[i])\n","            i += 1\n","        else:\n","            merged_list.append(list2[j])\n","            j += 1\n","\n","    # If there are remaining elements in list1, extend the merged list\n","    while i < len(list1):\n","        merged_list.append(list1[i])\n","        i += 1\n","\n","    # If there are remaining elements in list2, extend the merged list\n","    while j < len(list2):\n","        merged_list.append(list2[j])\n","        j += 1\n","\n","    return merged_list\n","\n","# Example usage\n","sorted_list1 = [1, 3, 5, 7]\n","sorted_list2 = [2, 4, 6, 8]\n","merged = merge_sorted_lists(sorted_list1, sorted_list2)\n","print(f\"Merged sorted list: {merged}\")  # Outputs: [1, 2, 3, 4, 5, 6, 7, 8]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wl_FCLTH1MWR","executionInfo":{"status":"ok","timestamp":1726674732369,"user_tz":-330,"elapsed":1040,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"76eea424-7b07-4f78-84f6-6cce269544ed"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Merged sorted list: [1, 2, 3, 4, 5, 6, 7, 8]\n"]}]},{"cell_type":"code","source":["def find_intersection(list1, list2):\n","    \"\"\"Find the intersection of two lists.\"\"\"\n","    # Use a set to store unique elements of list1 for faster lookups\n","    set1 = set(list1)\n","\n","    # Use a list comprehension to find common elements\n","    intersection = [item for item in list2 if item in set1]\n","\n","    return intersection\n","\n","# Example usage\n","list_a = [1, 2, 3, 4, 5]\n","list_b = [4, 5, 6, 7, 8]\n","result = find_intersection(list_a, list_b)\n","print(f\"Intersection of {list_a} and {list_b}: {result}\")  # Outputs: [4, 5]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j3GjFzHS1X4a","executionInfo":{"status":"ok","timestamp":1726674785100,"user_tz":-330,"elapsed":532,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"1e91d2c3-5c17-467e-ba78-bb115fdb83a2"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Intersection of [1, 2, 3, 4, 5] and [4, 5, 6, 7, 8]: [4, 5]\n"]}]},{"cell_type":"code","source":["def find_union(list1, list2):\n","    \"\"\"Find the union of two lists without duplicates.\"\"\"\n","    # Use a set to store unique elements from both lists\n","    union_set = set(list1) | set(list2)  # Combine both sets\n","\n","    # Convert the set back to a list (if needed) and return\n","    return list(union_set)\n","\n","# Example usage\n","list_a = [1, 2, 3, 4, 5]\n","list_b = [4, 5, 6, 7, 8]\n","result = find_union(list_a, list_b)\n","print(f\"Union of {list_a} and {list_b}: {result}\")  # Outputs: [1, 2, 3, 4, 5, 6, 7, 8]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dBjIlGP21k4C","executionInfo":{"status":"ok","timestamp":1726674830445,"user_tz":-330,"elapsed":629,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"286f3beb-0e2d-48dd-b4da-9ead251af8b2"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Union of [1, 2, 3, 4, 5] and [4, 5, 6, 7, 8]: [1, 2, 3, 4, 5, 6, 7, 8]\n"]}]},{"cell_type":"code","source":["import random\n","\n","def shuffle_list(lst):\n","    \"\"\"Shuffle a list randomly.\"\"\"\n","    shuffled = lst[:]  # Create a copy of the original list\n","    n = len(shuffled)\n","\n","    # Implementing the Fisher-Yates shuffle algorithm\n","    for i in range(n - 1, 0, -1):\n","        j = random.randint(0, i)  # Generate a random index\n","        # Swap the elements at index i and j\n","        shuffled[i], shuffled[j] = shuffled[j], shuffled[i]\n","\n","    return shuffled\n","\n","# Example usage\n","example_list = [1, 2, 3, 4, 5]\n","shuffled_list = shuffle_list(example_list)\n","print(f\"Original list: {example_list}\")  # Outputs: Original list: [1, 2, 3, 4, 5]\n","print(f\"Shuffled list: {shuffled_list}\")  # Outputs: Shuffled list: [3, 1, 4, 5, 2] (example output)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WQVfgFGD1v44","executionInfo":{"status":"ok","timestamp":1726674873793,"user_tz":-330,"elapsed":663,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"66d6d0cd-d068-41c1-cb86-96efced3290d"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Original list: [1, 2, 3, 4, 5]\n","Shuffled list: [5, 3, 4, 1, 2]\n"]}]},{"cell_type":"code","source":["def common_elements(tuple1, tuple2):\n","    \"\"\"Return a new tuple containing elements common to both input tuples.\"\"\"\n","    # Convert tuples to sets to find the intersection\n","    common_set = set(tuple1) & set(tuple2)\n","\n","    # Convert the set back to a tuple\n","    return tuple(common_set)\n","\n","# Example usage\n","tuple_a = (1, 2, 3, 4, 5)\n","tuple_b = (4, 5, 6, 7, 8)\n","result = common_elements(tuple_a, tuple_b)\n","print(f\"Common elements: {result}\")  # Outputs: Common elements: (4, 5)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S_VaseTM16e-","executionInfo":{"status":"ok","timestamp":1726674938354,"user_tz":-330,"elapsed":615,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"a478d309-0a1a-4018-c3f8-4ce329b7253a"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Common elements: (4, 5)\n"]}]},{"cell_type":"code","source":["def get_set_from_input(prompt):\n","    \"\"\"Prompt the user for a set of integers and return it as a set.\"\"\"\n","    user_input = input(prompt)\n","    # Split the input by commas, convert to integers, and create a set\n","    return set(int(num.strip()) for num in user_input.split(','))\n","\n","def main():\n","    \"\"\"Main function to get two sets from the user and print their intersection.\"\"\"\n","    set1 = get_set_from_input(\"Enter the first set of integers (separated by commas): \")\n","    set2 = get_set_from_input(\"Enter the second set of integers (separated by commas): \")\n","\n","    # Find the intersection\n","    intersection = set1 & set2\n","\n","    print(f\"Intersection of the two sets: {intersection}\")\n","\n","# Run the main function\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"UomyyggM2KFu","executionInfo":{"status":"ok","timestamp":1726675024343,"user_tz":-330,"elapsed":614,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["def concatenate_tuples(tuple1, tuple2):\n","    \"\"\"Concatenate two tuples and return a new tuple.\"\"\"\n","    return tuple1 + tuple2\n","\n","# Example usage\n","tuple_a = (1, 2, 3)\n","tuple_b = (4, 5, 6)\n","result = concatenate_tuples(tuple_a, tuple_b)\n","print(f\"Concatenated tuple: {result}\")  # Outputs: Concatenated tuple: (1, 2, 3, 4, 5, 6)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lwewkoui2fRa","executionInfo":{"status":"ok","timestamp":1726675076450,"user_tz":-330,"elapsed":924,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"6a1c4904-b2c9-47e9-ae96-4c4e9b02be89"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Concatenated tuple: (1, 2, 3, 4, 5, 6)\n"]}]},{"cell_type":"code","source":["def get_set_from_input(prompt):\n","    \"\"\"Prompt the user for a set of strings and return it as a set.\"\"\"\n","    user_input = input(prompt)\n","    # Split the input by commas and create a set\n","    return set(item.strip() for item in user_input.split(','))\n","\n","def main():\n","    \"\"\"Main function to get two sets from the user and print the difference.\"\"\"\n","    set1 = get_set_from_input(\"Enter the first set of strings (separated by commas): \")\n","    set2 = get_set_from_input(\"Enter the second set of strings (separated by commas): \")\n","\n","    # Find elements in set1 that are not in set2\n","    difference = set1 - set2\n","\n","    print(f\"Elements in the first set but not in the second set: {difference}\")\n","\n","# Run the main function\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"NF1nVlD62r5l","executionInfo":{"status":"ok","timestamp":1726675172800,"user_tz":-330,"elapsed":925,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["def slice_tuple(original_tuple, start_index, end_index):\n","    \"\"\"Return a new tuple containing elements from the original tuple within the specified range of indices.\"\"\"\n","    return original_tuple[start_index:end_index]\n","\n","# Example usage\n","example_tuple = (10, 20, 30, 40,)\n","start = 1\n","end = 4\n","result = slice_tuple(example_tuple, start, end)\n","print(f\"Sliced tuple: {result}\")  # Outputs: Sliced tuple: (20, 30, 40)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8A3EM8XK3DZK","executionInfo":{"status":"ok","timestamp":1726675246001,"user_tz":-330,"elapsed":610,"user":{"displayName":"Varun Garg","userId":"11663094782443047067"}},"outputId":"f8718b63-7ff1-451c-aeaf-e11ab246cdcd"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Sliced tuple: (20, 30, 40)\n"]}]},{"cell_type":"code","source":["def get_set_from_input(prompt):\n","    \"\"\"Prompt the user for a set of characters and return it as a set.\"\"\"\n","    user_input = input(prompt)\n","    # Split the input by commas and create a set\n","    return set(char.strip() for char in user_input.split(','))\n","\n","def main():\n","    \"\"\"Main function to get two sets from the user and print their union.\"\"\"\n","    set1 = get_set_from_input(\"Enter the first set of characters (separated by commas): \")\n","    set2 = get_set_from_input(\"Enter the second set of characters (separated by commas): \")\n","\n","    # Find the union of both sets\n","    union = set1 | set2\n","\n","    print(f\"Union of the two sets: {union}\")\n","\n","# Run the main function\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"-CntXr6D3VYi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def min_max_from_tuple(int_tuple):\n","    \"\"\"Return the maximum and minimum values from a tuple of integers using tuple unpacking.\"\"\"\n","    max_value = max(int_tuple)\n","    min_value = min(int_tuple)\n","    return max_value, min_value  # Returning as a tuple\n","\n","# Example usage\n","example_tuple = (10, 20, 5, 50, 15)\n","max_value, min_value = min_max_from_tuple(example_tuple)\n","print(f\"Maximum value: {max_value}\")  # Outputs: Maximum value: 50\n","print(f\"Minimum value: {min_value}\")  # Outputs: Minimum value: 5\n"],"metadata":{"id":"nDKoWCie3tQv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def main():\n","    # Define two sets of integers\n","    set1 = {1, 2, 3, 4, 5}\n","    set2 = {4, 5, 6, 7, 8}\n","\n","    # Calculate union, intersection, and difference\n","    union = set1 | set2\n","    intersection = set1 & set2\n","    difference = set1 - set2  # Elements in set1 but not in set2\n","\n","    # Print the results\n","    print(f\"Set 1: {set1}\")\n","    print(f\"Set 2: {set2}\")\n","    print(f\"Union: {union}\")\n","    print(f\"Intersection: {intersection}\")\n","    print(f\"Difference (Set 1 - Set 2): {difference}\")\n","\n","# Run the main function\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"cJqIlGvx4LAa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[" def count_occurrences(tup, element):\n","    \"\"\"Return the count of occurrences of the given element in the tuple.\"\"\"\n","    return tup.count(element)\n","\n","# Example usage\n","example_tuple = (1, 2, 3, 1, 4, 1, 5)\n","element_to_count = 1\n","count = count_occurrences(example_tuple, element_to_count)\n","print(f\"Count of {element_to_count} in the tuple: {count}\")  # Outputs: Count of 1 in the tuple: 3\n"],"metadata":{"id":"lI1IGGlz4nhi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_set_from_input(prompt):\n","    \"\"\"Prompt the user for a set of strings and return it as a set.\"\"\"\n","    user_input = input(prompt)\n","    # Split the input by commas and create a set\n","    return set(item.strip() for item in user_input.split(','))\n","\n","def main():\n","    \"\"\"Main function to get two sets from the user and print their symmetric difference.\"\"\"\n","    set1 = get_set_from_input(\"Enter the first set of strings (separated by commas): \")\n","    set2 = get_set_from_input(\"Enter the second set of strings (separated by commas): \")\n","\n","    # Find the symmetric difference of both sets\n","    symmetric_difference = set1 ^ set2\n","\n","    print(f\"Symmetric difference of the two sets: {symmetric_difference}\")\n","\n","# Run the main function\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"BpZbyRKT40cR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def word_frequencies(word_list):\n","    \"\"\"Return a dictionary of word frequencies from the input list.\"\"\"\n","    frequency_dict = {}\n","\n","    for word in word_list:\n","        # Convert to lowercase to make the counting case-insensitive\n","        word = word.lower()\n","        if word in frequency_dict:\n","            frequency_dict[word] += 1\n","        else:\n","            frequency_dict[word] = 1\n","\n","    return frequency_dict\n","\n","# Example usage\n","input_words = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"]\n","result = word_frequencies(input_words)\n","print(f\"Word frequencies: {result}\")  # Outputs: Word frequencies: {'apple': 3, 'banana': 2, 'orange': 1}\n"],"metadata":{"id":"uNhYCxPz5BNL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def merge_dictionaries(dict1, dict2):\n","    \"\"\"Merge two dictionaries, adding values of common keys.\"\"\"\n","    merged_dict = dict1.copy()  # Start with a copy of the first dictionary\n","\n","    for key, value in dict2.items():\n","        if key in merged_dict:\n","            # If the key exists, add the values\n","            merged_dict[key] += value\n","        else:\n","            # Otherwise, just add the key-value pair\n","            merged_dict[key] = value\n","\n","    return merged_dict\n","\n","# Example usage\n","dict_a = {'a': 1, 'b': 2, 'c': 3}\n","dict_b = {'b': 3, 'c': 4, 'd': 5}\n","result = merge_dictionaries(dict_a, dict_b)\n","print(f\"Merged dictionary: {result}\")  # Outputs: Merged dictionary: {'a': 1, 'b': 5, 'c': 7, 'd': 5}\n"],"metadata":{"id":"1g8bZ_Px5KaM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def access_nested_dict(nested_dict, keys):\n","    \"\"\"Access a value in a nested dictionary using a list of keys.\"\"\"\n","    current_value = nested_dict\n","\n","    for key in keys:\n","        if isinstance(current_value, dict) and key in current_value:\n","            current_value = current_value[key]\n","        else:\n","            return None  # Return None if the key does not exist\n","\n","    return current_value\n","\n","# Example usage\n","nested_dictionary = {\n","    'a': {\n","        'b': {\n","            'c': 42\n","        }\n","    },\n","    'x': {\n","        'y': 100\n","    }\n","}\n","\n","keys_to_access = ['a', 'b', 'c']\n","result = access_nested_dict(nested_dictionary, keys_to_access)\n","print(f\"Value accessed: {result}\")  # Outputs: Value accessed: 42\n","\n","# Example with a non-existing key\n","invalid_keys = ['a', 'b', 'd']\n","result_invalid = access_nested_dict(nested_dictionary, invalid_keys)\n","print(f\"Value accessed with invalid keys: {result_invalid}\")  # Outputs: Value accessed with invalid keys: None\n"],"metadata":{"id":"KNgkVgSI5T89"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def sort_dict_by_values(input_dict, descending=False):\n","    \"\"\"Return a sorted version of the dictionary based on its values.\"\"\"\n","    # Sort the dictionary by values and return a new dictionary\n","    sorted_dict = dict(sorted(input_dict.items(), key=lambda item: item[1], reverse=descending))\n","    return sorted_dict\n","\n","# Example usage\n","example_dict = {'apple': 5, 'banana': 2, 'cherry': 7, 'date': 3}\n","\n","# Sort in ascending order\n","sorted_ascending = sort_dict_by_values(example_dict)\n","print(f\"Sorted dictionary (ascending): {sorted_ascending}\")  # Outputs: {'banana': 2, 'date': 3, 'apple': 5, 'cherry': 7}\n","\n","# Sort in descending order\n","sorted_descending = sort_dict_by_values(example_dict, descending=True)\n","print(f\"Sorted dictionary (descending): {sorted_descending}\")  # Outputs: {'cherry': 7, 'apple': 5, 'date': 3, 'banana': 2}\n"],"metadata":{"id":"vXb_cyEB5bfq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def invert_dictionary(input_dict):\n","    \"\"\"Invert a dictionary, swapping keys and values.\"\"\"\n","    inverted_dict = {}\n","\n","    for key, value in input_dict.items():\n","        if value in inverted_dict:\n","            # If the value already exists, append the key to the list\n","            inverted_dict[value].append(key)\n","        else:\n","            # Otherwise, create a new entry with the key in a list\n","            inverted_dict[value] = [key]\n","\n","    return inverted_dict\n","\n","# Example usage\n","example_dict = {\n","    'a': 1,\n","    'b': 2,\n","    'c': 1,\n","    'd': 3,\n","}\n","\n","inverted = invert_dictionary(example_dict)\n","print(f\"Inverted dictionary: {inverted}\")\n","# Outputs: Inverted dictionary: {1: ['a', 'c'], 2: ['b'], 3: ['d']}\n"],"metadata":{"id":"ht6A7qSh5icm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"DWDbP6kk5pD0"},"execution_count":null,"outputs":[]}]}